import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json
import time
import datetime
from typing import Dict, List, Any, Optional
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
API_URL = os.environ.get("API_URL", "http://localhost:8000")
UPDATE_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
HISTORY_LENGTH = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
COLOR_THRESHOLD_LOW = 70  # –ù–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
COLOR_THRESHOLD_HIGH = 85  # –í–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è

# –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
site_data_cache = {}
prediction_history = {}
last_update_time = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
def get_sites():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–∫–æ–≤"""
    try:
        response = requests.get(f"{API_URL}/sites")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–∫–æ–≤: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return []

def get_site_details(site_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ"""
    try:
        response = requests.get(f"{API_URL}/sites/{site_id}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None

def get_feature_importance(site_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∫–∞"""
    try:
        response = requests.get(f"{API_URL}/sites/{site_id}/importance")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None

def send_prediction_request(site_id, features):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    try:
        payload = {
            "site_id": site_id,
            "features": features,
            "timestamp": datetime.datetime.now().isoformat()
        }
        response = requests.post(f"{API_URL}/predict", json=payload)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def color_scale(value, min_val=COLOR_THRESHOLD_LOW, max_val=COLOR_THRESHOLD_HIGH):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏"""
    if value < min_val:
        return "#ff0000"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    elif value > max_val:
        return "#00ff00"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    else:
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ –∑–µ–ª–µ–Ω–æ–º—É
        ratio = (value - min_val) / (max_val - min_val)
        r = int(255 * (1 - ratio))
        g = int(255 * ratio)
        return f"#{r:02x}{g:02x}00"

def create_gauge_chart(value, min_val=0, max_val=100, title="–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è"):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ –≤–∏–¥–µ –¥–∞—Ç—á–∏–∫–∞"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number",
        value = value,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': title},
        gauge = {
            'axis': {'range': [min_val, max_val]},
            'bar': {'color': color_scale(value)},
            'steps': [
                {'range': [min_val, COLOR_THRESHOLD_LOW], 'color': 'rgba(255, 0, 0, 0.2)'},
                {'range': [COLOR_THRESHOLD_LOW, COLOR_THRESHOLD_HIGH], 'color': 'rgba(255, 255, 0, 0.2)'},
                {'range': [COLOR_THRESHOLD_HIGH, max_val], 'color': 'rgba(0, 255, 0, 0.2)'}
            ],
            'threshold': {
                'line': {'color': "black", 'width': 4},
                'thickness': 0.75,
                'value': value
            }
        }
    ))
    
    fig.update_layout(
        height=250,
        margin=dict(l=20, r=20, t=50, b=20),
    )
    
    return fig

def create_history_chart(history, site_name):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏"""
    if not history:
        return None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ DataFrame
    df = pd.DataFrame(history)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
    fig = make_subplots(
        rows=2, cols=1,
        row_heights=[0.7, 0.3],
        subplot_titles=(f"–ò—Å—Ç–æ—Ä–∏—è –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏ - {site_name}", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ"),
        vertical_spacing=0.12
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏
    fig.add_trace(
        go.Scatter(
            x=df['timestamp'], 
            y=df['prediction'], 
            mode='lines+markers',
            name='–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è',
            line=dict(color='blue', width=2),
            marker=dict(
                color=[color_scale(v) for v in df['prediction']],
                size=8
            )
        ),
        row=1, col=1
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –ª–∏–Ω–∏–∏
    fig.add_shape(
        type="line",
        x0=df['timestamp'].min(),
        y0=COLOR_THRESHOLD_LOW,
        x1=df['timestamp'].max(),
        y1=COLOR_THRESHOLD_LOW,
        line=dict(color="Red", width=1, dash="dash"),
        row=1, col=1
    )
    
    fig.add_shape(
        type="line",
        x0=df['timestamp'].min(),
        y0=COLOR_THRESHOLD_HIGH,
        x1=df['timestamp'].max(),
        y1=COLOR_THRESHOLD_HIGH,
        line=dict(color="Green", width=1, dash="dash"),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
    if len(df) > 1:
        mean_val = df['prediction'].mean()
        deviations = df['prediction'] - mean_val
        
        fig.add_trace(
            go.Bar(
                x=df['timestamp'],
                y=deviations,
                marker_color=[color_scale(v) for v in df['prediction']],
                name='–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'
            ),
            row=2, col=1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—É—é –ª–∏–Ω–∏—é
        fig.add_shape(
            type="line",
            x0=df['timestamp'].min(),
            y0=0,
            x1=df['timestamp'].max(),
            y1=0,
            line=dict(color="Gray", width=1),
            row=2, col=1
        )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        height=500,
        showlegend=False,
        margin=dict(l=20, r=20, t=50, b=20),
    )
    
    fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=2, col=1)
    fig.update_yaxes(title_text="–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è (%)", row=1, col=1)
    fig.update_yaxes(title_text="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (%)", row=2, col=1)
    
    return fig

def create_importance_chart(importance_data):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    if not importance_data or 'feature_importance' not in importance_data:
        return None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∂–Ω–æ—Å—Ç–∏
    importance = importance_data['feature_importance']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df = pd.DataFrame(list(importance.items()), columns=['Feature', 'Importance'])
    df = df.sort_values('Importance', ascending=True).tail(10)  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
    
    # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    fig = px.bar(
        df, 
        x='Importance', 
        y='Feature',
        orientation='h',
        title='–¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
        color='Importance',
        color_continuous_scale=px.colors.sequential.Bluered
    )
    
    fig.update_layout(
        height=400,
        margin=dict(l=20, r=20, t=50, b=20),
        yaxis={'categoryorder': 'total ascending'}
    )
    
    return fig

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.title("–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–∫–æ–≤
        sites = get_sites()
        
        if not sites:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.")
            site_options = []
        else:
            site_options = [site['site_id'] for site in sites]
        
        # –í—ã–±–æ—Ä —É—á–∞—Å—Ç–∫–∞
        selected_site = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫:",
            options=site_options,
            format_func=lambda x: next((site['name'] for site in sites if site['site_id'] == x), x)
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        refresh_interval = st.slider(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):", 
            min_value=10, 
            max_value=300, 
            value=UPDATE_INTERVAL,
            step=10,
            disabled=not auto_refresh
        )
        
        # –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.experimental_rerun()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.divider()
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        
        try:
            response = requests.get(f"{API_URL}/statistics")
            if response.status_code == 200:
                stats = response.json()
                st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤", stats.get('requests_processed', 0))
                st.metric("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", f"{stats.get('uptime_seconds', 0) // 3600} —á {(stats.get('uptime_seconds', 0) % 3600) // 60} –º–∏–Ω")
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API")
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {str(e)}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if auto_refresh:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.empty() –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        placeholder = st.empty()
        
        while True:
            with placeholder.container():
                display_dashboard(selected_site, sites)
            
            time.sleep(refresh_interval)
    else:
        display_dashboard(selected_site, sites)

def display_dashboard(selected_site, sites):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""
    if not selected_site:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ
    site_details = get_site_details(selected_site)
    
    if not site_details:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ {selected_site}")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–∞—Å—Ç–∫–µ
    site_name = site_details.get('name', selected_site)
    site_status = site_details.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    last_update = site_details.get('last_update', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    if last_update != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
        try:
            last_update_dt = datetime.datetime.fromisoformat(last_update)
            last_update = last_update_dt.strftime("%d.%m.%Y %H:%M:%S")
        except:
            pass
    
    st.header(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—á–∞—Å—Ç–∫–∞: {site_name}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å", site_status)
    
    with col2:
        st.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", last_update)
    
    with col3:
        target_range = site_details.get('target_range', [COLOR_THRESHOLD_LOW, COLOR_THRESHOLD_HIGH])
        st.metric("–¶–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", f"{target_range[0]}-{target_range[1]}%")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    current_prediction = None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if selected_site in site_data_cache:
        current_prediction = site_data_cache[selected_site]
    else:
        # –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç API
        # –¢—É—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –∏–ª–∏ –∏–∑ SCADA
        dummy_features = {"feature1": 0.5, "feature2": 0.8, "feature3": 0.2}
        prediction_result = send_prediction_request(selected_site, dummy_features)
        
        if prediction_result and 'prediction' in prediction_result:
            current_prediction = prediction_result
            site_data_cache[selected_site] = current_prediction
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if current_prediction:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        history_entry = {
            'timestamp': datetime.datetime.now(),
            'prediction': current_prediction['prediction'],
            'lower_bound': current_prediction.get('lower_bound', current_prediction['prediction'] * 0.95),
            'upper_bound': current_prediction.get('upper_bound', current_prediction['prediction'] * 1.05)
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —É—á–∞—Å—Ç–∫–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if selected_site not in prediction_history:
            prediction_history[selected_site] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        prediction_history[selected_site].append(history_entry)
        if len(prediction_history[selected_site]) > HISTORY_LENGTH:
            prediction_history[selected_site] = prediction_history[selected_site][-HISTORY_LENGTH:]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if current_prediction:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞—Ç—á–∏–∫ –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏
            st.subheader("–¢–µ–∫—É—â–∞—è –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è")
            gauge_chart = create_gauge_chart(
                current_prediction['prediction'],
                min_val=0,
                max_val=100,
                title="–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è (%)"
            )
            st.plotly_chart(gauge_chart, use_container_width=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            
            details_df = pd.DataFrame({
                "–ú–µ—Ç—Ä–∏–∫–∞": [
                    "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                    "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (95%)",
                    "–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (95%)",
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏"
                ],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    f"{current_prediction['prediction']:.2f}%",
                    f"{current_prediction.get('lower_bound', current_prediction['prediction'] * 0.95):.2f}%",
                    f"{current_prediction.get('upper_bound', current_prediction['prediction'] * 1.05):.2f}%",
                    f"{current_prediction.get('confidence', 0.9) * 100:.1f}%"
                ]
            })
            
            st.table(details_df)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏
            st.subheader("–ò—Å—Ç–æ—Ä–∏—è –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏")
            history_chart = create_history_chart(prediction_history.get(selected_site, []), site_name)
            if history_chart:
                st.plotly_chart(history_chart, use_container_width=True)
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –≥—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞.")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    importance_data = get_feature_importance(selected_site)
    
    if importance_data:
        importance_chart = create_importance_chart(importance_data)
        if importance_chart:
            st.plotly_chart(importance_chart, use_container_width=True)
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞.")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    if current_prediction:
        prediction_value = current_prediction['prediction']
        target_min, target_max = site_details.get('target_range', [COLOR_THRESHOLD_LOW, COLOR_THRESHOLD_HIGH])
        
        if prediction_value < target_min:
            st.error(f"‚ö†Ô∏è –ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({target_min}%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if prediction_value < target_min * 0.9:
                st.error("‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.")
                st.markdown("""
                **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
                - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å—ã—Ä—å—è
                - –ò–∑–Ω–æ—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                
                **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
                1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–ª—å—á–∏—Ç–µ–ª–µ–π
                2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å—ã—Ä—å—è
                3. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                """)
        elif prediction_value > target_max:
            st.warning(f"‚ö†Ô∏è –ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({target_max}%). –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–µ–ø–µ–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if prediction_value > target_max * 1.1:
                st.warning("‚ùó –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞.")
                st.markdown("""
                **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
                - –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–ª—å—á–µ–Ω–∏—è
                - –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—ã—Ä—å—è
                - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                
                **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
                1. –£–º–µ–Ω—å—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–ª—å—á–µ–Ω–∏—è
                2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—á–∏ —Å—ã—Ä—å—è
                3. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤
                """)
        else:
            st.success(f"‚úÖ –ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({target_min}-{target_max}%).")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            if prediction_history.get(selected_site) and len(prediction_history[selected_site]) > 5:
                recent_values = [entry['prediction'] for entry in prediction_history[selected_site][-5:]]
                mean_recent = sum(recent_values) / len(recent_values)
                
                if abs(prediction_value - mean_recent) > 5:
                    st.info(f"‚ÑπÔ∏è –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π: {mean_recent:.2f}%).")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
    st.divider()
    st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")

if __name__ == "__main__":
    main() 